{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ephemeral C# Library to handle time intervals (composite start and end) Support for open and closed (time) intervals. Support for common operations like Covers(), Intersect(), Join(), etc.. Support for (disjoint) collections of intervals. Please check all the available options in the Methods Section . This documentation is hosted at albertogregorio.com/ephemeral . Examples Interval Example var now = DateTimeOffset.UtcNow; Interval yesterday = Interval.CreateOpen(now.AddDays(-1), now); Interval today = yesterday.Shift(TimeSpan.FromDays(1)); yesterday.Overlaps(today); // returns true Interval Collection Example IDisjointIntervalSet collection = new DisjointIntervalSet(); collection.Add(yesterday); collection.Add(today); collection.Start == yesterday.Start; // true collection.End == today.End; // true var collection2 = yesterday.Union(today); collection1.equals(collection2); // true var consolidatedCollection = collection2.Consolidate(); collection2.Count(); // 2 consolidatedCollection.Count(); // 1","title":"ephemeral"},{"location":"#ephemeral","text":"C# Library to handle time intervals (composite start and end) Support for open and closed (time) intervals. Support for common operations like Covers(), Intersect(), Join(), etc.. Support for (disjoint) collections of intervals. Please check all the available options in the Methods Section . This documentation is hosted at albertogregorio.com/ephemeral .","title":"ephemeral"},{"location":"#examples","text":"","title":"Examples"},{"location":"#interval-example","text":"var now = DateTimeOffset.UtcNow; Interval yesterday = Interval.CreateOpen(now.AddDays(-1), now); Interval today = yesterday.Shift(TimeSpan.FromDays(1)); yesterday.Overlaps(today); // returns true","title":"Interval Example"},{"location":"#interval-collection-example","text":"IDisjointIntervalSet collection = new DisjointIntervalSet(); collection.Add(yesterday); collection.Add(today); collection.Start == yesterday.Start; // true collection.End == today.End; // true var collection2 = yesterday.Union(today); collection1.equals(collection2); // true var consolidatedCollection = collection2.Consolidate(); collection2.Count(); // 2 consolidatedCollection.Count(); // 1","title":"Interval Collection Example"},{"location":"methods/","text":"The following methods are available when any class implements IDisjointIntervalSet : Covers(t: DateTime) : bool Join(s: IDisjointIntevalSet) : IDisjointIntevalSet Join(i: IInterval) : IDisjointIntevalSet Intersect(i : IInterval) : IDisjointIntevalSet Consolidate() : IDisjointIntevalSet The following methods are available when any class implements IInterval : Covers(t: DateTime) : bool Covers(i: IInterval) : bool DurationUntilNow(): TimeSpan ToInterval(): IInterval Union(i: IInterval) : IDisjointIntevalSet Intersect(i : IInterval) : Option<IInterval> DurationOfIntersect(IInterval) : TimeSpan Intersects(i: IInterval): bool IsContiguouslyFollowedBy(i: IInterval) : bool IsContiguouslyPrecededBy(i: IInterval) : bool StartsBefore(i: IInterval) : bool","title":"Methods"}]}